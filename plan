# HashiCorp Vault — Production Architecture & Deployment Guide

## 🏗️ Architecture Overview

This setup follows **HashiCorp’s official production reference** using **Integrated Storage (Raft)**, built for **high availability**, **fault tolerance**, and **auto recovery**.

### 🎯 Design Goals
1. **N+2 Redundancy:** 5 Vault nodes tolerate 2 node failures  
2. **Multi-AZ Distribution:** Survive entire Availability Zone (AZ) loss  
3. **Zero Single Points of Failure:** Each layer is redundant  
4. **Auto-Recovery:** Self-healing via Auto Scaling and Raft Autopilot  
5. **End-to-End Security:** TLS + AWS KMS for unseal  

---

## ☁️ AWS Network Design

VPC: 10.0.0.0/16
├── Public Subnets (3 AZs)
│   ├── 10.0.101.0/24 - ALB + NAT Gateway (us-west-2a)
│   ├── 10.0.102.0/24 - ALB + NAT Gateway (us-west-2b)
│   └── 10.0.103.0/24 - ALB + NAT Gateway (us-west-2c)
└── Private Subnets (3 AZs)
    ├── 10.0.1.0/24 - Vault Nodes 1-2 (us-west-2a)
    ├── 10.0.2.0/24 - Vault Nodes 3-4 (us-west-2b)
    └── 10.0.3.0/24 - Vault Node 5 (us-west-2c)

---

## ⚖️ Load Balancer (ALB)

- **Type:** Application Load Balancer (HTTPS 8200)  
- **Health Check:** `/v1/sys/health?standbyok=true&perfstandbyok=true`  
- **Codes:** `200=Active`, `429=Standby`, `472=DR`, `473=Perf Standby`  
- **Stickiness:** Enabled (1 hour cookie)  
- **TLS:** End-to-end encryption  

---

## 🔐 Vault Cluster (5-Node Raft)

| Node | AZ | Role | Subnet |
|------|----|------|--------|
| vault-1 | us-west-2a | Leader/Follower | 10.0.1.0/24 |
| vault-2 | us-west-2a | Follower | 10.0.1.0/24 |
| vault-3 | us-west-2b | Follower | 10.0.2.0/24 |
| vault-4 | us-west-2b | Follower | 10.0.2.0/24 |
| vault-5 | us-west-2c | Follower | 10.0.3.0/24 |

**Raft Consensus:**
- Quorum = 3 of 5 nodes  
- Leader election = automatic (~10s)  
- Log replication = synchronous  

---

## 💾 Storage and Audit Setup

- **Storage Type:** Integrated Storage (Raft)  
- **Data Path:** `/opt/vault/data` (100 GB gp3 EBS)  
- **IOPS:** 3000 | **Throughput:** 125 MB/s  
- **Encryption:** EBS at rest  

**Audit Logs:**
- Path: `/var/log/vault-audit` (50 GB volume)  
- Format: JSON (one entry per line)  

---

## 🔑 Auto-Unseal (AWS KMS)

### First Boot
1. Vault starts sealed  
2. Run `vault operator init`  
3. Master key encrypted via AWS KMS  
4. Recovery keys generated  

### Restart (Auto Unseal)
1. Vault authenticates with IAM role  
2. Uses AWS KMS to decrypt key  
3. Vault auto-unseals and joins cluster  

✅ No manual unseal  
✅ Safe for Auto Scaling and restarts  

---

## 🧱 Security Controls

### TLS
- Client → ALB → Vault: TLS 1.2+  
- Vault → Vault (Raft): mTLS (8201)  

### IAM Role Permissions
- `kms:Decrypt`, `kms:DescribeKey`  
- `ec2:DescribeInstances`, `ec2:DescribeTags`  
- `autoscaling:DescribeAutoScalingGroups`  
- `logs:CreateLogStream`, `logs:PutLogEvents`  

### Security Groups
| Port | Source | Purpose |
|------|---------|----------|
| 8200 | ALB SG | Vault API |
| 8201 | Self | Raft Traffic |
| 22 | Bastion SG | Admin SSH |

---

## ☁️ Backup & Recovery

### Backup (Manual)
```bash
vault operator raft snapshot save backup-$(date +%Y%m%d).snap
```

### Restore
```bash
vault operator raft snapshot restore backup.snap
```

Stored snapshots can be pushed to **AWS S3** for DR.

---

## ✅ Summary

This setup delivers:
- Production-grade **Vault HA cluster**
- **5 nodes** using **Raft Integrated Storage**
- **AWS KMS Auto-Unseal**
- **Multi-AZ fault tolerance**
- **End-to-end TLS**
- **Daily snapshot → S3 backup**
- **Self-healing + quorum-based consistency**

When Vault starts, it is initially sealed, requiring unseal keys to unlock it.
Normally, we would need to manually enter 3 unseal keys, which is time-consuming.
To automate this, we use AWS KMS to securely store unseal keys.
When Vault starts, it automatically retrieves the keys from AWS KMS and unseals itself.
Benefit: This is secure, efficient, and reduces manual intervention.
